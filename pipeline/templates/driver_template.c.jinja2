{%  import "common_template.c.jinja2" as LIB %}
{%- set origin_prefix = "origin" -%}
{%- set mutant_prefix = "mut" -%}
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include <time.h>
#include <fcntl.h>  // for the definition of lock
#include <sys/stat.h>

/* Test function dependencies */
{% for name in includes.global %}
#include <{{ name }}>
{% endfor %}
{% for name in includes.local %}
#include "{{ name }}"
{% endfor %}


/**************************************************
* Main template for the function {{ function.name }} defined in the file {{ source_file }} *
***************************************************/
// The return type should be the same to the original function, otherwise raise an error "conflict function definition"
// Actually functions do not need extern keyword.
{% if flag_extern is true %}
extern {{ function.returns.type }} {{ function.prototype }};
extern {{ function.returns.type }} {{ mutant_prefix }}_{{ function.prototype }};
{% else %}
// extern {{ function.returns.type }} {{ function.prototype }};
// extern {{ function.returns.type }} {{ mutant_prefix }}_{{ function.prototype }};
{% endif %}

{% include "driver_lib_template.c" %}



/**************************************************
*  Entry for test driver
***************************************************/
// This program takes maximum four parameters, the first one is necessary
// [1] <input_value.bin>: This is the input file that will be provided to the original and the mutated functions (binary)
// [2] [working_dir]: current working directory where all the additional inputs will be located
//                    (if you only provide the working_dir, we make a single log file on this directory)
// [3] [input]: if this parameter is set ('all' - all inputs, 'crash' - only crashed inputs), we copy inputs from AFL into a 'inputs' directory.
// [4] [log]: if this parameter is set (no matter what string is), we create logs into a file in a 'logs' directory.
int main(int argc, char** argv)
{
    int ret = 0;               // for comparing results (0 - identical  >=1 - non-identical)
    if (argc<2){
        printf("No input provided!\n");
        abort();
    }

    // apply output log
    if (argc > 2) {
        TD_WORKING_DIR = argv[2];   // set global variable
        set_seq_id();
        set_exec_id();
        log_open_check();
    }
    if (argc > 4) log_open();

    /* opening the input file */
    load_file(argv[1]);
    if (argc > 3){
        if (strcmp(argv[3], "crash")==0) TD_INPUT_STORE_OPTION = TD_INPUT_ONLY_CRASH;
        else                             TD_INPUT_STORE_OPTION = TD_INPUT_ALL;
    }

    if (TD_INPUT_STORE_OPTION == TD_INPUT_ALL) store_input_data(0);

    logging_check_point(1);

    {{ LIB.print_return_var_definition(function.returns, origin_prefix, mutant_prefix) }}
    {{ LIB.print_variable_definition(function.params, origin_prefix) }}
    {{ LIB.print_variable_definition(function.params, mutant_prefix) }}
    {{ LIB.print_required_length(function.params, origin_prefix) }}

{# Calling original function #}
    {{ LIB.print_SUT_initialize(initializes, origin_prefix) }}
    {{ LIB.print_param_initiaize(function.params, origin_prefix) }}
    {{ LIB.print_function_call(function, '', origin_prefix) }}
    logging_check_point(1);

{# Calling mutated function #}
    {{ LIB.print_SUT_initialize(initializes, mutant_prefix) }}
    {{ LIB.print_param_initiaize(function.params, mutant_prefix) }}
    {{ LIB.print_function_call(function, mutant_prefix, mutant_prefix) }}
    logging_check_point(1);

{# Comparing parameters and returns #}
    {{ LIB.print_comparing_params(function.params, origin_prefix, mutant_prefix) }}
    {{ LIB.print_comparing_returns(function.returns, origin_prefix, mutant_prefix) }}

{# Reporting results #}
    // If not identical
    if (ret != 0){
        if ( TD_INPUT_STORE_OPTION == TD_INPUT_ONLY_CRASH ) store_input_data(0);
        char buf[50];
        sprintf(buf, "[Not identical] (%d)", ret);
        logging_check_point(0);
        logging(buf);
    }
    else{
        logging_check_point(1);
        logging("[Identical] (0)");
    }

    clean();
    if (argc > 2) log_close_check();
    if (argc > 3) log_close();
    if (ret != 0) safe_abort();
    printf("All cleaned!\n");
    return 0;
}
